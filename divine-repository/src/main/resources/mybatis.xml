<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xmlns:aop = "http://www.springframework.org/schema/aop"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd" >
    <!--<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">-->
        <!--<property name="connectionLogEnabled" value="false"/>-->
        <!--<property name="statementLogEnabled" value="false"/>-->
        <!--<property name="resultSetLogEnabled" value="false"/>-->
        <!--<property name="statementExecutableSqlLogEnable" value="true"/>-->
    <!--</bean>-->
    <bean id = "kaipaoDataSource" class = "com.alibaba.druid.pool.DruidDataSource"
          init-method = "init" destroy-method = "close" >
        <property name = "driverClassName" value = "${database.driver}" />
        <property name = "url" value = "${kaipao.database.url}" />
        <property name = "username" value = "${kaipao.database.username}" />
        <property name = "password" value = "${kaipao.database.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name = "initialSize" value = "3" />
        <property name = "minIdle" value = "1" />
        <property name = "maxActive" value = "100" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "30000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value = "30000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value = "200000" />
        <property name = "testWhileIdle" value = "true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name = "testOnBorrow" value = "true" />
        <property name = "testOnReturn" value = "false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name = "poolPreparedStatements" value = "false" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name = "validationQuery" value = "select 1 " />
        <property name = "filters" value = "stat" />
        <!-- 是否自动回收超时链接 -->
        <property name="removeAbandoned" value="true" />
        <property name="logAbandoned" value="true"/>
        <property name="removeAbandonedTimeoutMillis" value="60000"/>
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="logFilter" />-->
            <!--</list>-->
        <!--</property>-->
    </bean >


    <bean id = "zooDataSource" class = "com.alibaba.druid.pool.DruidDataSource"
          init-method = "init" destroy-method = "close" >
        <property name = "driverClassName" value = "${database.driver}" />
        <property name = "url" value = "${zoo.database.url}" />
        <property name = "username" value = "${zoo.database.username}" />
        <property name = "password" value = "${zoo.database.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name = "initialSize" value = "3" />
        <property name = "minIdle" value = "1" />
        <property name = "maxActive" value = "100" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "30000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value = "30000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value = "200000" />
        <property name = "testWhileIdle" value = "true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name = "testOnBorrow" value = "true" />
        <property name = "testOnReturn" value = "false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name = "poolPreparedStatements" value = "false" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name = "validationQuery" value = "select 1 " />
        <property name = "filters" value = "stat" />
        <!-- 是否自动回收超时链接 -->
        <property name="removeAbandoned" value="true" />
        <property name="logAbandoned" value="true"/>
        <property name="removeAbandonedTimeoutMillis" value="60000"/>
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="logFilter" />-->
            <!--</list>-->
        <!--</property>-->
    </bean >
    <bean id = "userDataSource" class = "com.alibaba.druid.pool.DruidDataSource"
            init-method = "init" destroy-method = "close" >
        <property name = "driverClassName" value = "${database.driver}" />
        <property name = "url" value = "${user.database.url}" />
        <property name = "username" value = "${user.database.username}" />
        <property name = "password" value = "${user.database.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name = "initialSize" value = "3" />
        <property name = "minIdle" value = "1" />
        <property name = "maxActive" value = "100" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "30000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value = "30000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value = "200000" />
        <property name = "testWhileIdle" value = "true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name = "testOnBorrow" value = "true" />
        <property name = "testOnReturn" value = "false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name = "poolPreparedStatements" value = "false" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name = "validationQuery" value = "select 1 " />
        <property name = "filters" value = "stat" />
        <!-- 是否自动回收超时链接 -->
        <property name="removeAbandoned" value="true" />
        <property name="logAbandoned" value="true"/>
        <property name="removeAbandonedTimeoutMillis" value="60000"/>
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="logFilter" />-->
            <!--</list>-->
        <!--</property>-->
    </bean >
    <bean id = "multipleDataSource" class = "cn.idongjia.divine.db.datasource.ThreadLocalRountingDataSource" >
        <property name = "defaultTargetDataSource" ref = "kaipaoDataSource" />
        <property name = "targetDataSources" >
            <map >
                <entry key = "kaipaoDataSource" value-ref = "kaipaoDataSource" />
                <entry key = "zooDataSource" value-ref = "zooDataSource" />
                <entry key = "userDataSource" value-ref = "userDataSource" />

            </map >
        </property >
    </bean >
    <bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean" >
        <property name = "dataSource" ref = "multipleDataSource" />
        <property name="mapperLocations" value="classpath*:mapper/**/*Mapper.xml"/>
        <property name="typeAliasesPackage"
                  value="cn.idongjia.divine.biz.repository.db.mybatis.query,cn.idongjia.divine.biz.db.mybatis.pojo" />
    </bean >
    <tx:advice id = "advice" transaction-manager = "transactionManager" >
        <tx:attributes >
            <tx:method name = "select*" read-only = "true" />
            <tx:method name = "find*" read-only = "true" />
            <tx:method name = "get*" read-only = "true" />
            <tx:method name = "has*" read-only = "true" />
            <tx:method name = "count*" read-only = "true" />
            <tx:method name = "search*" read-only = "true" />
            <tx:method name = "list*" read-only = "true" />
            <tx:method name = "*" rollback-for = "java.lang.Exception" />
        </tx:attributes >
    </tx:advice >
    <!-- 定义AOP配置 -->
    <aop:config >
        <!-- 定义一个切入点 -->
        <aop:pointcut expression = "execution (* cn.idongjia.divine.db.mybatis.mapper..*.*(..))" id = "services" />
        <!-- 对切入点和事务的通知，进行适配 -->
        <aop:advisor advice-ref = "advice" pointcut-ref = "services" />
    </aop:config >
    <aop:aspectj-autoproxy proxy-target-class = "true" />
    <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer" >
        <property name = "basePackage" value = "cn.idongjia.divine.db.mybatis.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean >

    <bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager" >
        <property name = "dataSource" ref = "multipleDataSource" />

    </bean >

</beans >
